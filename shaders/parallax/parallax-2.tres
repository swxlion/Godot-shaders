[gd_resource type="Shader" format=2]

[resource]
code = "// Refer: https://learnopengl-cn.github.io/05%20Advanced%20Lighting/05%20Parallax%20Mapping/
// Refer: https://learnopengl.com/Advanced-Lighting/Parallax-Mapping
// Blinn-Phong 光照模型 https://learnopengl.com/Advanced-Lighting/Advanced-Lighting
// 深度图：黑色(0)代表和表面齐平的高度，白色(1)代表最深的凹陷值。

shader_type spatial;
render_mode depth_draw_always;

uniform sampler2D diffuseMap : hint_albedo;
uniform sampler2D normalMap : hint_white;
uniform sampler2D depthMap : hint_white;

uniform float height_scale = 0.05;
uniform float ambient_factor : hint_range(0.0, 1.0) = 0.1;
uniform float specular_factor : hint_range(0.0, 1.0) = 0.2;     // Blinn-Phong 光照模型下的 高光颜色

uniform bool enableOcclusionProcess = false;
uniform bool enableOffsetLimiting = false;

uniform vec2 UVScale = vec2(1.0, 1.0);          // 采样次数
uniform vec3 lightPos;                          // 灯光位置

varying mat3 TBN;
varying vec3 TangentLightPos;
varying vec3 TangentFragmentPos;

void vertex()
{
    //vec4 outPos = PROJECTION_MATRIX * INV_CAMERA_MATRIX * WORLD_MATRIX * vec4(VERTEX, 1.0);
    vec3 FragmentPos = (WORLD_MATRIX * vec4(VERTEX, 1.0)).xyz;
    UV *= UVScale;

    vec3 T = normalize(mat3(WORLD_MATRIX) * -TANGENT);
    vec3 B = normalize(mat3(WORLD_MATRIX) * -BINORMAL);
    vec3 N = normalize(mat3(WORLD_MATRIX) * NORMAL);
    TBN = transpose(mat3(T, B, N));

    TangentLightPos = TBN * lightPos;
    TangentFragmentPos  = TBN * FragmentPos;

    //POSITION = outPos;
}

vec2 ParallaxMapping(vec2 texCoords, vec3 viewDir)
{ 
    float height =  texture(depthMap, texCoords).r;
    if (!enableOffsetLimiting)
        return texCoords - viewDir.xy / viewDir.z * (height * height_scale);
    else
        return texCoords - viewDir.xy * (height * height_scale);
}

vec2 ParallaxOcclusionMapping(vec2 texCoords, vec3 viewDir)
{ 
    // number of depth layers
    const float minLayers = 10.0;
    const float maxLayers = 20.0;
    float numLayers = mix(maxLayers, minLayers, abs(dot(vec3(0.0, 0.0, 1.0), viewDir)));  
    // calculate the size of each layer
    float layerDepth = 1.0 / numLayers;
    // depth of current layer
    float currentLayerDepth = 0.0;
    // the amount to shift the texture coordinates per layer (from vector P)
    //vec2 P = viewDir.xy / viewDir.z * height_scale;
    vec2 P;
    if (!enableOffsetLimiting)
        P = viewDir.xy / viewDir.z * height_scale;
    else
        P = viewDir.xy * height_scale;

    vec2 deltaTexCoords = P / numLayers;
  
    // get initial values
    vec2  currentTexCoords     = texCoords;
    float currentDepthMapValue = texture(depthMap, currentTexCoords).r;
      
    while(currentLayerDepth < currentDepthMapValue)
    {
        // shift texture coordinates along direction of P
        currentTexCoords -= deltaTexCoords;
        // get depthmap value at current texture coordinates
        currentDepthMapValue = texture(depthMap, currentTexCoords).r;  
        // get depth of next layer
        currentLayerDepth += layerDepth;  
    }
    
    // -- parallax occlusion mapping interpolation from here on
    // get texture coordinates before collision (reverse operations)
    vec2 prevTexCoords = currentTexCoords + deltaTexCoords;

    // get depth after and before collision for linear interpolation
    float afterDepth  = currentDepthMapValue - currentLayerDepth;
    float beforeDepth = texture(depthMap, prevTexCoords).r - currentLayerDepth + layerDepth;
 
    // interpolation of texture coordinates
    float weight = afterDepth / (afterDepth - beforeDepth);
    vec2 finalTexCoords = prevTexCoords * weight + currentTexCoords * (1.0 - weight);

    return finalTexCoords;
}

void fragment()
{
    vec3 TangentViewPos = TBN * VIEW;
    //vec3 TangentViewPos = TBN * CAMERA_MATRIX[3].xyz;

    // Offset texture coordinates with Parallax Mapping
    vec3 viewDir = normalize(TangentViewPos - TangentFragmentPos);
    vec2 texCoords;
    if (enableOcclusionProcess == false)
        texCoords = ParallaxMapping(UV, viewDir);
    else
        texCoords = ParallaxOcclusionMapping(UV, viewDir);

    // discards a fragment when sampling outside default texture region (fixes border artifacts)
    //if(texCoords.x > 1.0 || texCoords.y > 1.0 || texCoords.x < 0.0 || texCoords.y < 0.0)
    //    discard;

    // Obtain normal from normal map
    vec3 normal = texture(normalMap, UV).rgb;
    normal = normalize(normal * 2.0 - 1.0);
   
    // Get diffuse color
    vec3 color = texture(diffuseMap, texCoords).rgb;
    // Ambient  环境光
    vec3 ambient = ambient_factor * color;
    // Diffuse 颜色/漫反射
    vec3 lightDir = normalize(TangentLightPos - TangentFragmentPos);
    float diff = max(dot(lightDir, normal), 0.0);   //-- 点击判断光线夹角，是逆光还是顺光。夹角越小，则物体离光照的轴线越近，光照越强。
    vec3 diffuse = diff * color;
    // Specular    高光
    //vec3 reflectDir = reflect(-lightDir, normal);
    vec3 halfwayDir = normalize(lightDir + viewDir);  
    float spec = pow(max(dot(normal, halfwayDir), 0.0), 32.0);

    vec3 specular = vec3(specular_factor) * spec;
    //vec3 FragColor = vec4(ambient + diffuse + specular, 1.0);

    ALBEDO = ambient + diffuse + specular;
}
"
